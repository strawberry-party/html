{"version":3,"sources":["Components/CustomerDelete.js","Components/CustomerRealDelete.js","Components/Customer.js","Components/CustomerAdd.js","App.js","serviceWorker.js","index.js"],"names":["CustomerDelete","id","fetch","method","this","props","stateRefresh","onClick","e","deleteCustomer","Component","CustomerRealDelete","deleteCustomerReal","Customer","TableRow","TableCell","name","birthday","gender","job","axios","require","default","CustomerAdd","state","userName","handleFormSubmit","bind","handleValueChange","addCustomer","preventDefault","then","response","console","log","data","setState","nextState","target","value","post","onSubmit","type","onChange","App","customers","completed","callApi","res","catch","err","a","json","body","mode","Table","TableHead","TableBody","map","c","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e715d413.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class  CustomerDelete extends Component{\n    deleteCustomer(id){\n        const url = '/api/customers/' + id;\n        fetch(url, {\n            method: 'DELETE'\n        });\n        this.props.stateRefresh();\n    }\n    \n    render(){\n        return(\n            <button onClick={(e) => {this.deleteCustomer(this.props.id)}}>삭제</button>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class  CustomerRealDelete extends Component{\n    deleteCustomerReal(id){\n        const url = '/api/customers/real/' + id;\n        fetch(url, {\n            method: 'DELETE'\n        });\n        this.props.stateRefresh();\n    }\n    \n    render(){\n        return(\n            <button onClick={(e) => {this.deleteCustomerReal(this.props.id)}}>영구 삭제</button>\n        )\n    }\n}","import React, {Component} from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport CustomerDelete from './CustomerDelete';\nimport CustomerRealDelete from './CustomerRealDelete';\n\nexport default class Customer extends Component{\n    render(){\n        return (\n        <TableRow>\n            <TableCell>{this.props.id}</TableCell>\n            <TableCell>{this.props.name}</TableCell>\n            <TableCell>{this.props.birthday}</TableCell>\n            <TableCell>{this.props.gender}</TableCell>\n            <TableCell>{this.props.job}</TableCell>\n            <TableCell><CustomerDelete stateRefresh={this.props.stateRefresh} id={this.props.id}/><CustomerRealDelete stateRefresh={this.props.stateRefresh} id={this.props.id}/></TableCell>\n        </TableRow>\n        )\n    }\n}","import React, { Component } from 'react';\nconst axios = require('axios').default;\n\nexport default class CustomerAdd extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            userName: '',\n            birthday: '',\n            gender: '',\n            job: ''\n        }\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.addCustomer = this.addCustomer.bind(this);    \n    }\n\n    handleFormSubmit(e){\n        e.preventDefault();\n        this.addCustomer()\n            .then((response) => {\n                console.log(response.data);\n                this.props.stateRefresh();\n            });\n        this.setState({\n            userName: '',\n            birthday: '',\n            gender: '',\n            job: ''\n        });\n    }\n\n    handleValueChange(e){\n        let nextState = {};\n        nextState[e.target.name] = e.target.value;\n        this.setState(nextState);\n    }\n\n    addCustomer(){\n        const url = '/api/customers';\n        var data = {\n            userName: this.state.userName,\n            birthday: this.state.birthday,\n            gender: this.state.gender,\n            job: this.state.job\n        }\n        return axios.post(url, data);\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleFormSubmit}>\n                <h1>고객 추가</h1>\n                이름: <input type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.handleValueChange} /><br/>\n                생년월일: <input type=\"text\" name=\"birthday\" value={this.state.birthday} onChange={this.handleValueChange} /><br/>\n                성별: <input type=\"text\" name=\"gender\" value={this.state.gender} onChange={this.handleValueChange} /><br/>\n                직업: <input type=\"text\" name=\"job\" value={this.state.job} onChange={this.handleValueChange} /><br/>\n                <button type=\"submit\">추가하기</button>\n            </form>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Customer from './Components/Customer';\nimport CustomerAdd from './Components/CustomerAdd';\nimport './App.css';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      customers: '',\n      completed: 0,\n      mode: 'welcome'\n    }\n  }\n\n  stateRefresh = () => {\n    this.setState({\n      customers: '',\n      completed: 0\n    });\n    this.callApi()\n    .then(res => this.setState({customers: res}))\n    .catch(err => console.log(err));\n  }\n\n  componentDidMount(){\n    this.callApi()\n      .then(res => this.setState({customers: res}))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async() => {\n    const response = await fetch('/api/customers');\n    const body = await response.json();\n    return body;\n  }\n  render(){\n    if(this.state.mode === 'welcome'){\n      return (\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>번호</TableCell>\n                <TableCell>이름</TableCell>\n                <TableCell>생년월일</TableCell>\n                <TableCell>성별</TableCell>\n                <TableCell>직업</TableCell>\n                <TableCell>설정</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {this.state.customers ? this.state.customers.map(c=>{\n              return <Customer stateRefresh={this.stateRefresh} key={c.id} id={c.id} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job}/>\n            }): ''}\n            </TableBody>\n          </Table>\n          <CustomerAdd stateRefresh={this.stateRefresh}/>\n        </div>\n      );\n    }    \n\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}